{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"49d9bf425192159fa116df29241dac1cf06d4b6f","modified":1588476085673},{"_id":"themes/landscape/.npmignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1588476085675},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1588476085676},{"_id":"themes/landscape/package.json","hash":"d07f326588fef82f1d23ae3101c9ddfff34c132f","modified":1588476085700},{"_id":"themes/landscape/README.md","hash":"e7cc82dc79596f36ba05a8139e7d6b2dfc4ae5f9","modified":1588476085677},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1588476085677},{"_id":"themes/landscape/_config.yml","hash":"218c5fb76666696c42dc86e2de4711e6b80befbf","modified":1588476085678},{"_id":"source/_posts/Promise实现原理.md","hash":"780df26ee3a143e0b763f33c8b66af24daa65597","modified":1589267162218},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1588476085679},{"_id":"source/_posts/test.md","hash":"8383e6b1acf60f81bbcb3dbc2049cbc88529a330","modified":1588476085674},{"_id":"themes/landscape/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1588476085680},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1588476085680},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1588476085681},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1588476085681},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1588476085682},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1588476085683},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1588476085698},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1588476085698},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1588476085697},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1588476085699},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1588476085700},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1588476085700},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1588476085699},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1588476085686},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1588476085698},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"a7faab4f3601b28107af5b1095b3966c2f88fec8","modified":1588476085685},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"3beb0d164acacb6f21e1ca2038158a74ab4a73e4","modified":1588476085687},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1588476085689},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1588476085688},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1588476085691},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1588476085693},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"148bdf714dd1a7bf55e571f13808ceae079200cc","modified":1588476085692},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"89998e6b2929c4ff5093bbf6b86d611d7420be52","modified":1588476085691},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1588476085696},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1588476085695},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1588476085696},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1588476085696},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1588476085697},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1588476085697},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1588476085701},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1588476085722},{"_id":"themes/landscape/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1588476085708},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1588476085722},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1588476085723},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1588476085724},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1588476085724},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1588476085724},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1588476085725},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1588476085728},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1588476085731},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1588476085693},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1588476085693},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1588476085694},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1588476085694},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1588476085729},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1588476085695},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1588476085695},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1588476085730},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1588476085702},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1588476085703},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1588476085702},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1588476085703},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1588476085704},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1588476085705},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1588476085705},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1588476085704},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1588476085705},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1588476085706},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1588476085707},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1588476085706},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1588476085710},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1588476085710},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1588476085716},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1588476085726},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1588476085726},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1588476085727},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1588476085727},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1588476085715},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1588476085727},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1588476085728},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1588476085721},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1588476085713},{"_id":"public/2019/03/20/test/index.html","hash":"0e60cda5f637e691b4bd7141c39f3d6be3f0f1e5","modified":1589267217063},{"_id":"public/archives/index.html","hash":"a7cd161dc4472049538ce7db479d535a9f17a5c4","modified":1589267217063},{"_id":"public/archives/2019/index.html","hash":"ae0988a5a1d17167e8476e7d9b386358effc31ac","modified":1589267217064},{"_id":"public/archives/2019/03/index.html","hash":"381363d80882fe281978296f633b16674d331c36","modified":1589267217064},{"_id":"public/archives/2020/index.html","hash":"a63f7035e9fd68609308d42838ad22a088f9c499","modified":1589267217064},{"_id":"public/archives/2020/05/index.html","hash":"a57c4eabd69e0d02ab975e2ab0440ea3bb4dea3a","modified":1589267217064},{"_id":"public/2020/05/12/Promise实现原理/index.html","hash":"aa4e81c8d5ae6f51c10d0104380faa550b538b1e","modified":1589267217064},{"_id":"public/index.html","hash":"c9d57087103bbdb504ae97e782d10648d576ff11","modified":1589267217064},{"_id":"public/CNAME","hash":"49d9bf425192159fa116df29241dac1cf06d4b6f","modified":1589267217072},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1589267217072},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1589267217072},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1589267217072},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1589267217072},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1589267217072},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1589267217072},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1589267217072},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1589267217072},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1589267217072},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1589267217073},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1589267218890},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1589267218896},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1589267218896},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1589267218896},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1589267218896},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1589267218897},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1589267218897},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1589267218897},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1589267218897},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1589267218897},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1589267218897},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1589267218898},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1589267218907}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Promise实现原理","date":"2020-05-12T07:06:02.000Z","_content":"\n\n# Promise 实现原理\n\n## Promise 简史\n\nPromise 作为一种异步编程的解决方案，在 JavaScript 被广泛使用。Promise 并不是一个新的概念，Promise 的概念在 1976 年就已经被提出。\n在 2011年初，Promise 随着 jQuery 1.5 的发布，而变得越来越流行。2012 年，Promise 被提出作为规范。Promise 在 ECMAScript 2015 中成为正式规范，并已被几乎所有的浏览器和 Node 兼容。\n\n## 从设计模式来看 Promise\n\nPromise 在一定程度上继承自观察者和发布/订阅模式。\n\n下面是一个极简的例子，我们可以从观察者模式和发布/订阅模式来理解 Promise.\n\n```js\nclass Promise {\n  _callbacks = []\n  constructor(executor) {\n    const callbacks = value => this._callbacks.forEach(callback => callback(value))\n    executor(callbacks) // 相当于 emit 或 notify\n  }\n  then(onFulfilled) {\n    this._callbacks.push(onFulfilled) // 相当于 subscribe 或 on\n  }\n}\n\nconst promise1 = new MyPromise((callback) => {\n  setTimeout(() => {\n    callback('promise1')\n  }, 1000)\n})\n\npromise1.then((value) => {\n  console.log('1 秒后', value)\n})\n\npromise1.then((value) => {\n  console.log('1 秒后', value)\n})\n\n```\n\n但是 Promise 是一种高度封装的接口，它的 API 不止如此简单，Promise 有其自身的 Promise。\n\n## Promise 规范\n\nPromise 的实现有不同的规范，如 [Promise/A](http://wiki.commonjs.org/wiki/Promises/A)，[Promise/A+](https://promisesaplus.com/differences-from-promises-a)，[Promise/B](http://wiki.commonjs.org/wiki/Promises/B)，[Promise/KISS](http://wiki.commonjs.org/wiki/Promises/KISS)，Promise/C，[Promise/D](http://wiki.commonjs.org/wiki/Promises/D) 规范。\nPromise/A 规范定义了什么是 Promise，其他规范在其基础上扩展了相关 API.ES6 的 Promise 是基于 Promise/A+ 规范的实现。而 Promise/A+ 是基于 Promise/A 规范的升级。相关规范也提供了[测试](https://github.com/promises-aplus/promises-tests)，以检测实现是否兼容规范。由于ECMAScript 使用 Promise/A+ 规范，这里我们使用 JavaScript 来实现 Promise/A+ 规范。[这里](https://promisesaplus.com/implementations)有很多 Promise/A+ 的实现。\n\n## 实现 Promise/A+ 规范\n\n下面是关于 Promise/A+ 规范的介绍。先了解规范以便于实现该规范。\nPromise 表示异步操作的最终结果，与之交互的主要方式是通过 `then` 方法，该方法注册两个回调函数，用于接受 Promise 终值或 promise 抛出的异常。\n\n### 相关术语\n\n1. Promise 表示拥有 `then` 方法的对象或者函数,其行为符合本规范；\n2. Thenable  表示拥有 `then` 方法的对象或函数；\n3. 值（value）指合法的 JavaScript 值（包括 `undefined`, thenable 或 promise）；\n4. 异常（exception） 指使用 `throw` 语句抛出的值；\n5. 拒因（reason）指 promise 被拒绝的原因；\n\n### 规范要求\n\n#### Promise 的状态\n\nPromise 有三种状态：等待态（Pending）, 执行态（Fulfilled） 或 拒绝态（Rejected）。\n\n- 等待态（Pending）\n  - 可以转换为 fulfilled 或 rejected\n- 执行态（Fulfilled）\n  - 不能转换为其他状态\n  - 拥一个**不可变**的终值\n- 拒绝态（Rejected）。\n  - 不能转换为其他状态\n  - 拥有一个不可变的拒因\n这里的不可变指标识的不可变（immutable identity）（可用 `===` 判断相等），但不是深度不可变。\n（引用地址相等，但可更改属性值）。这里我们举个例子\n\n```js\nlet value = [1]\n\nconst p = Promise.resolve(value)\n\np.then(val => console.log(val)) // [1]\np.then(val => console.log(val === value)) // true\n\np.then(val => { val = [2]; console.log(val)}) // [2]\np.then(val => { console.log(val) }) // [1]\n\np.then(val => { val[0] = 2; console.log(val === value)}) // [2] true\np.then(val => console.log(val)) // [2]\np.then(val => console.log(val === value)) //  true\n\n```\n\n#### Then 方法\n\nPromise 一定有一个 `then` 方法，`then` 方法接受两个参数：\n\n```js\npromise.then(onFulfilled, onRejected)\n```\n\n- `onFulfilled` 和 `onRejected` 都为可选参数；\n  - 若 `onFulfilled` 不是函数，则被忽略；\n  - 若 `onRejected` 不是函数，则被忽略；\n- `onFulfilled`\n  - 在 `promise` 执行（fulfilled）后调用，其第一个参数为 `promise` 的终值；\n  - 在 `promise` 执行结束（fulfilled）前不可调用；\n  - 其只调用一次；\n- `onRejected`：\n  - 在 `promise` 决绝（rejected）后调用，其第一个参数为 `promise` 的据因；\n  - 它必须在 promise rejected 状态之后调用；\n  - 其只调用一次；\n- `onFulfilled` 或 `onRejected` 只有在[执行环境](http://es5.github.io/#x10.3)堆栈仅包含平台代码[^注1]后才可调用\n- `onFulfilled` 或 `onRejected` 是作为函数调用（即没有 this 值）[^注2]；\n- `then` 可以在同一个 promise 上调用多次\n  - 当 `promise` 被执行后，所有的 `onFulfilled` 回调会按照注册的顺序依次执行；\n  - 当 `promise` 被拒绝后，所有的 `onRejected` 回调会按照指定的顺序执行；\n\n- `then` 方法一定返回 `promise` 对象。[^注3]\n\n ```js\n promise2 = promise1.then(onFulfilled, onRejected)\n ```\n\n- 如果 `onFulfilled` 或 `onRejected` 返回一个值 `x`, 则运行 Promise 解决过程 `[[Resolve]](promise2, x)`;\n- 如果 `onFulfilled` 或 `onRejected` 抛出异常 `e`，`promise2` 必须拒绝执行, 并以 `e` 作为拒因;\n- 如果 `onFulfiled` 不是函数且 `promise1` 被执行，则 `promise2` 执行并返回和 `promise1` 相同的值。\n- 如果 `onRejected` 不是函数且 `promise1` 被拒绝，则 `promise2` 拒绝并返回和 `promise1` 相同的拒因。\n\n（**不论 `promise1` reject 还是 resolve , `promise2` 都会被 resolve，只有在 `promise1` 抛出异常后，`promise2` 才会被拒绝（reject）,其余都会被执行完成**）\n\n### Promise 解决过程\n\n**Promise 的解决过程**是一个抽象的操作，其需输入一个 promise 和一个值 `x`，将其表示为 `[[resolve]](promise, x)`。\n\n如果 `x` 有 `then` 方法 ，且行为像 `promise`, 解决程序会试图使 `promise` 接受 `x` 的状态，否则其用 `x` 的值执行 `promise`。\n\nThenable 的特性使得 `promise` 的实现更具通用性：只要其暴露出一个遵循 Promise/A+ 规范的 `then` 方法即可，同时也使 Promise/A+ 规范能与那些不太规范实现良好兼容。\n\n运行 `[[resolve]](promise, x)`，会执行以下步骤：\n\n1. 如果 `promise` 和 `x` 指向同一个对象，抛出 `TypeError` 为拒因并拒绝 `promise`。\n\n2. `x` 为 Promise：如果 `x` 为 `promise`，则使 `promise` 接受 `x` 的状态。[^注4]\n    - `x` 处于等待态（`pending`）， `promise` 需保持等待态（`pending`）直到 `x` 被解决或被拒绝；\n    - `x` 处于执行态（`fulfilled`），用同样的值执行 `promise`；\n    - `x` 处于拒绝态（`rejected`），用同样的据因拒绝 `promise`；\n3. `x` 为对象或函数：\n    - 把 `x.then` 赋值给 `then`；[^注5]\n    - 如果取 `x.then` 值抛出错误 `e`，则将 `e` 作为据因拒绝 `promise`；\n    - 如果 `then` 是函数，将 `x` 作为其 `this` 值（绑定至 `x`）来调用，第一个参数为 `resolvePromise` ，第二个参数是 `rejectPromise`\n        - 如果 `resolvePromise`以参数 `y` 调用，运行 `[[resolve]](promise, y)`\n        - 如果 `rejectPromise`以据因 `r` 调用，则以 `r` 为原因拒绝 `promise`\n        - 如果 `resolvePromise` 和 `rejectPromise` 均被调用，或者被同样的参数调用多次，则第一个调用优先，其他的调用都将被忽略。\n        - 如果调用 `then` 抛出异常 `e`\n          - 如果 `resolvePromise` 和 `rejectPromise` 已调用过，则忽略\n          - 否则以 `e` 为原因拒绝 `Promise`\n        - 如果 `then` 不是函数，则 `x` 为值执行 `promise`\n        - 如果 `x` 不是一个对象或函数，则以 `x` 为值执行 `promise`\n\n（这里 `then` 是函数，为 `promise` 核心。）\n\n如果一个 `promise` 被一个循环的 thenable 链中的对象解决, 而 `[[resolve]](promise, thenable)` 的递归性质使得其被再次调用，将导致无线递归。鼓励（但不是必需的）检测这种递归，并以 `TypeError` 为据因拒绝 `promise`。[^注6]\n\n### 注解\n\n[^注1]: 这里的平台代码是指引擎、环境以及 promise 的实现代码。实际上，此要求可确保在事件循环回合之后调用 `onFulfilled` 或 `onRejected` 并随后以新的栈异步执行。可使用**宏任务(macro-task)**机制（如 `setTimeout` 或 `setImmetiate` 或**微任务(micro-task)**机制（如 `MutationObserver` 或 `process.nextTick`）来实现。由于 promise 实现代码就是平台代码，因此它本身可能包含一个任务调度队列或 trampoline 在其中调用处理程序。\n\n> （这里提到了事件循环（EventLoop）、宏任务（macro-task）和微任务（micro-task）等概念，事件循环是一个执行模型。在执行 JavaScript 代码时，将整个脚本作为一个宏任务（macro-task）执行，执行过程中，同步代码会直接执行，而其他代码引擎会将任务按照类别分到这两个队列中，分别是宏任务（macro-task）和微任务（micro-task）队列，首先在 macrotask 的队列（这个队列也被叫做 task queue）中取出第一个任务，执行完毕后取出 microtask 队列中的所有任务顺序执行；之后再取 macrotask 任务，周而复始，直到两个队列执行完毕。）\n\n- > 宏任务（macro-task）：`script` 、`setTimeout`、`setInterval` 、`setImmediate` 、I/O 、UI rendering\n- > 微任务（micro-task）：`process.nextTick`, `Promises`（浏览器原生，和基于此的技术，如 `fetch` 等）, `Object.observe`, `MutationObserver`\n\n[^注2]: 在严格模式下，`this` 会是 `undefined`。在宽松模式下其为 `global` 对象。\n\n[^注3]: 如果符合所有其他规范要求，可以允许 `promise2 === promise1`。每种实现都应说明 `promise2 === promise1` 是否可以成立，以及在什么条件下成立。\n\n[^注4]: 通常，只有它来自当前的实现，才能判断 `x` 是否是一个真正的 promise。此条款允许采取已知符合 promise 标准实现的状态。\n\n[^注5]：我们首先储存了指向 `x.then` 的引用，然后测试并调用该引用，以避免在过程中对 `x.then` 属性的多次访问。这是为了避免访问器属性在不同访问过程中发生改变，保证访问器属性的一致性。\n\n[^注6]: 实现不应对 thenable 链的深度设限，并假设超出深度限制就是无限递归。只有真正的循环递归才应抛出 `TypeError` 异常。如果链上有多个不同的 thenable，则递归下去才是正确的行为。\n\n### 代码实现\n\nPromise 的原理是使用回调函数在异步操作后执行，只不过时将回调封装在内部，通过 `then` 方法实现链式使得多层回调看似变一层，而同一个 `promise` 的 `then` 方法可以调用多次。所以可以将回调函数（`onFulfilled` 和 `onRejected`）保存到数组中，在完成后执行。\n\n代码实现：[code](https://github.com/L9m/promise.git)\n\n这样我基本实现了 Promise/A+ 规范，相比 ES6 中的 Promise, 还缺少一些 API，这些 API 相对简单。对于 Promise, executor 会立即执行， executor 会接受两个参数——回调函数，回调函数绑定 `this` 至当前 promise，当 executor 执行完毕或拒绝后，会执行回调函数，改变当前 promise，如改变 promise 的状态，然后调用 `then` 注册的回调函数，所以回调函数是链接上下 Promise 的关键。`then` 方法会注册回调函数，并且返回 promise, 以进行链式调用，不过它的内部还对接受的参数进行了一些判断和处理。\n\n## Promise 优缺点\n\nPromise 相对于观察者模式和发布/订阅模式的优点是：\n\n1. Promise 一定程度上解决了深度嵌套的问题；\n2. Promise API 暴露相对简洁，也更为优雅；\n3. 支持序列执行，利于多异步协作；\n4. 更好的错误处理；\n\n主要缺点是：高级接口对 API 的封装使其失去了一定的灵活性。\n\n## 参考\n\n- [Promises/A+](https://promisesaplus.com/)\n- [TS 版 Promise ，promise-polyfill 实现过程详解](https://github.com/leer0911/myPromise)\n- [promised](https://github.com/yanguango/promised)\n- [图解 Promise 实现原理](https://zhuanlan.zhihu.com/p/58428287)\n","source":"_posts/Promise实现原理.md","raw":"---\ntitle: Promise实现原理\ndate: 2020-05-12 15:06:02\ntags:\n---\n\n\n# Promise 实现原理\n\n## Promise 简史\n\nPromise 作为一种异步编程的解决方案，在 JavaScript 被广泛使用。Promise 并不是一个新的概念，Promise 的概念在 1976 年就已经被提出。\n在 2011年初，Promise 随着 jQuery 1.5 的发布，而变得越来越流行。2012 年，Promise 被提出作为规范。Promise 在 ECMAScript 2015 中成为正式规范，并已被几乎所有的浏览器和 Node 兼容。\n\n## 从设计模式来看 Promise\n\nPromise 在一定程度上继承自观察者和发布/订阅模式。\n\n下面是一个极简的例子，我们可以从观察者模式和发布/订阅模式来理解 Promise.\n\n```js\nclass Promise {\n  _callbacks = []\n  constructor(executor) {\n    const callbacks = value => this._callbacks.forEach(callback => callback(value))\n    executor(callbacks) // 相当于 emit 或 notify\n  }\n  then(onFulfilled) {\n    this._callbacks.push(onFulfilled) // 相当于 subscribe 或 on\n  }\n}\n\nconst promise1 = new MyPromise((callback) => {\n  setTimeout(() => {\n    callback('promise1')\n  }, 1000)\n})\n\npromise1.then((value) => {\n  console.log('1 秒后', value)\n})\n\npromise1.then((value) => {\n  console.log('1 秒后', value)\n})\n\n```\n\n但是 Promise 是一种高度封装的接口，它的 API 不止如此简单，Promise 有其自身的 Promise。\n\n## Promise 规范\n\nPromise 的实现有不同的规范，如 [Promise/A](http://wiki.commonjs.org/wiki/Promises/A)，[Promise/A+](https://promisesaplus.com/differences-from-promises-a)，[Promise/B](http://wiki.commonjs.org/wiki/Promises/B)，[Promise/KISS](http://wiki.commonjs.org/wiki/Promises/KISS)，Promise/C，[Promise/D](http://wiki.commonjs.org/wiki/Promises/D) 规范。\nPromise/A 规范定义了什么是 Promise，其他规范在其基础上扩展了相关 API.ES6 的 Promise 是基于 Promise/A+ 规范的实现。而 Promise/A+ 是基于 Promise/A 规范的升级。相关规范也提供了[测试](https://github.com/promises-aplus/promises-tests)，以检测实现是否兼容规范。由于ECMAScript 使用 Promise/A+ 规范，这里我们使用 JavaScript 来实现 Promise/A+ 规范。[这里](https://promisesaplus.com/implementations)有很多 Promise/A+ 的实现。\n\n## 实现 Promise/A+ 规范\n\n下面是关于 Promise/A+ 规范的介绍。先了解规范以便于实现该规范。\nPromise 表示异步操作的最终结果，与之交互的主要方式是通过 `then` 方法，该方法注册两个回调函数，用于接受 Promise 终值或 promise 抛出的异常。\n\n### 相关术语\n\n1. Promise 表示拥有 `then` 方法的对象或者函数,其行为符合本规范；\n2. Thenable  表示拥有 `then` 方法的对象或函数；\n3. 值（value）指合法的 JavaScript 值（包括 `undefined`, thenable 或 promise）；\n4. 异常（exception） 指使用 `throw` 语句抛出的值；\n5. 拒因（reason）指 promise 被拒绝的原因；\n\n### 规范要求\n\n#### Promise 的状态\n\nPromise 有三种状态：等待态（Pending）, 执行态（Fulfilled） 或 拒绝态（Rejected）。\n\n- 等待态（Pending）\n  - 可以转换为 fulfilled 或 rejected\n- 执行态（Fulfilled）\n  - 不能转换为其他状态\n  - 拥一个**不可变**的终值\n- 拒绝态（Rejected）。\n  - 不能转换为其他状态\n  - 拥有一个不可变的拒因\n这里的不可变指标识的不可变（immutable identity）（可用 `===` 判断相等），但不是深度不可变。\n（引用地址相等，但可更改属性值）。这里我们举个例子\n\n```js\nlet value = [1]\n\nconst p = Promise.resolve(value)\n\np.then(val => console.log(val)) // [1]\np.then(val => console.log(val === value)) // true\n\np.then(val => { val = [2]; console.log(val)}) // [2]\np.then(val => { console.log(val) }) // [1]\n\np.then(val => { val[0] = 2; console.log(val === value)}) // [2] true\np.then(val => console.log(val)) // [2]\np.then(val => console.log(val === value)) //  true\n\n```\n\n#### Then 方法\n\nPromise 一定有一个 `then` 方法，`then` 方法接受两个参数：\n\n```js\npromise.then(onFulfilled, onRejected)\n```\n\n- `onFulfilled` 和 `onRejected` 都为可选参数；\n  - 若 `onFulfilled` 不是函数，则被忽略；\n  - 若 `onRejected` 不是函数，则被忽略；\n- `onFulfilled`\n  - 在 `promise` 执行（fulfilled）后调用，其第一个参数为 `promise` 的终值；\n  - 在 `promise` 执行结束（fulfilled）前不可调用；\n  - 其只调用一次；\n- `onRejected`：\n  - 在 `promise` 决绝（rejected）后调用，其第一个参数为 `promise` 的据因；\n  - 它必须在 promise rejected 状态之后调用；\n  - 其只调用一次；\n- `onFulfilled` 或 `onRejected` 只有在[执行环境](http://es5.github.io/#x10.3)堆栈仅包含平台代码[^注1]后才可调用\n- `onFulfilled` 或 `onRejected` 是作为函数调用（即没有 this 值）[^注2]；\n- `then` 可以在同一个 promise 上调用多次\n  - 当 `promise` 被执行后，所有的 `onFulfilled` 回调会按照注册的顺序依次执行；\n  - 当 `promise` 被拒绝后，所有的 `onRejected` 回调会按照指定的顺序执行；\n\n- `then` 方法一定返回 `promise` 对象。[^注3]\n\n ```js\n promise2 = promise1.then(onFulfilled, onRejected)\n ```\n\n- 如果 `onFulfilled` 或 `onRejected` 返回一个值 `x`, 则运行 Promise 解决过程 `[[Resolve]](promise2, x)`;\n- 如果 `onFulfilled` 或 `onRejected` 抛出异常 `e`，`promise2` 必须拒绝执行, 并以 `e` 作为拒因;\n- 如果 `onFulfiled` 不是函数且 `promise1` 被执行，则 `promise2` 执行并返回和 `promise1` 相同的值。\n- 如果 `onRejected` 不是函数且 `promise1` 被拒绝，则 `promise2` 拒绝并返回和 `promise1` 相同的拒因。\n\n（**不论 `promise1` reject 还是 resolve , `promise2` 都会被 resolve，只有在 `promise1` 抛出异常后，`promise2` 才会被拒绝（reject）,其余都会被执行完成**）\n\n### Promise 解决过程\n\n**Promise 的解决过程**是一个抽象的操作，其需输入一个 promise 和一个值 `x`，将其表示为 `[[resolve]](promise, x)`。\n\n如果 `x` 有 `then` 方法 ，且行为像 `promise`, 解决程序会试图使 `promise` 接受 `x` 的状态，否则其用 `x` 的值执行 `promise`。\n\nThenable 的特性使得 `promise` 的实现更具通用性：只要其暴露出一个遵循 Promise/A+ 规范的 `then` 方法即可，同时也使 Promise/A+ 规范能与那些不太规范实现良好兼容。\n\n运行 `[[resolve]](promise, x)`，会执行以下步骤：\n\n1. 如果 `promise` 和 `x` 指向同一个对象，抛出 `TypeError` 为拒因并拒绝 `promise`。\n\n2. `x` 为 Promise：如果 `x` 为 `promise`，则使 `promise` 接受 `x` 的状态。[^注4]\n    - `x` 处于等待态（`pending`）， `promise` 需保持等待态（`pending`）直到 `x` 被解决或被拒绝；\n    - `x` 处于执行态（`fulfilled`），用同样的值执行 `promise`；\n    - `x` 处于拒绝态（`rejected`），用同样的据因拒绝 `promise`；\n3. `x` 为对象或函数：\n    - 把 `x.then` 赋值给 `then`；[^注5]\n    - 如果取 `x.then` 值抛出错误 `e`，则将 `e` 作为据因拒绝 `promise`；\n    - 如果 `then` 是函数，将 `x` 作为其 `this` 值（绑定至 `x`）来调用，第一个参数为 `resolvePromise` ，第二个参数是 `rejectPromise`\n        - 如果 `resolvePromise`以参数 `y` 调用，运行 `[[resolve]](promise, y)`\n        - 如果 `rejectPromise`以据因 `r` 调用，则以 `r` 为原因拒绝 `promise`\n        - 如果 `resolvePromise` 和 `rejectPromise` 均被调用，或者被同样的参数调用多次，则第一个调用优先，其他的调用都将被忽略。\n        - 如果调用 `then` 抛出异常 `e`\n          - 如果 `resolvePromise` 和 `rejectPromise` 已调用过，则忽略\n          - 否则以 `e` 为原因拒绝 `Promise`\n        - 如果 `then` 不是函数，则 `x` 为值执行 `promise`\n        - 如果 `x` 不是一个对象或函数，则以 `x` 为值执行 `promise`\n\n（这里 `then` 是函数，为 `promise` 核心。）\n\n如果一个 `promise` 被一个循环的 thenable 链中的对象解决, 而 `[[resolve]](promise, thenable)` 的递归性质使得其被再次调用，将导致无线递归。鼓励（但不是必需的）检测这种递归，并以 `TypeError` 为据因拒绝 `promise`。[^注6]\n\n### 注解\n\n[^注1]: 这里的平台代码是指引擎、环境以及 promise 的实现代码。实际上，此要求可确保在事件循环回合之后调用 `onFulfilled` 或 `onRejected` 并随后以新的栈异步执行。可使用**宏任务(macro-task)**机制（如 `setTimeout` 或 `setImmetiate` 或**微任务(micro-task)**机制（如 `MutationObserver` 或 `process.nextTick`）来实现。由于 promise 实现代码就是平台代码，因此它本身可能包含一个任务调度队列或 trampoline 在其中调用处理程序。\n\n> （这里提到了事件循环（EventLoop）、宏任务（macro-task）和微任务（micro-task）等概念，事件循环是一个执行模型。在执行 JavaScript 代码时，将整个脚本作为一个宏任务（macro-task）执行，执行过程中，同步代码会直接执行，而其他代码引擎会将任务按照类别分到这两个队列中，分别是宏任务（macro-task）和微任务（micro-task）队列，首先在 macrotask 的队列（这个队列也被叫做 task queue）中取出第一个任务，执行完毕后取出 microtask 队列中的所有任务顺序执行；之后再取 macrotask 任务，周而复始，直到两个队列执行完毕。）\n\n- > 宏任务（macro-task）：`script` 、`setTimeout`、`setInterval` 、`setImmediate` 、I/O 、UI rendering\n- > 微任务（micro-task）：`process.nextTick`, `Promises`（浏览器原生，和基于此的技术，如 `fetch` 等）, `Object.observe`, `MutationObserver`\n\n[^注2]: 在严格模式下，`this` 会是 `undefined`。在宽松模式下其为 `global` 对象。\n\n[^注3]: 如果符合所有其他规范要求，可以允许 `promise2 === promise1`。每种实现都应说明 `promise2 === promise1` 是否可以成立，以及在什么条件下成立。\n\n[^注4]: 通常，只有它来自当前的实现，才能判断 `x` 是否是一个真正的 promise。此条款允许采取已知符合 promise 标准实现的状态。\n\n[^注5]：我们首先储存了指向 `x.then` 的引用，然后测试并调用该引用，以避免在过程中对 `x.then` 属性的多次访问。这是为了避免访问器属性在不同访问过程中发生改变，保证访问器属性的一致性。\n\n[^注6]: 实现不应对 thenable 链的深度设限，并假设超出深度限制就是无限递归。只有真正的循环递归才应抛出 `TypeError` 异常。如果链上有多个不同的 thenable，则递归下去才是正确的行为。\n\n### 代码实现\n\nPromise 的原理是使用回调函数在异步操作后执行，只不过时将回调封装在内部，通过 `then` 方法实现链式使得多层回调看似变一层，而同一个 `promise` 的 `then` 方法可以调用多次。所以可以将回调函数（`onFulfilled` 和 `onRejected`）保存到数组中，在完成后执行。\n\n代码实现：[code](https://github.com/L9m/promise.git)\n\n这样我基本实现了 Promise/A+ 规范，相比 ES6 中的 Promise, 还缺少一些 API，这些 API 相对简单。对于 Promise, executor 会立即执行， executor 会接受两个参数——回调函数，回调函数绑定 `this` 至当前 promise，当 executor 执行完毕或拒绝后，会执行回调函数，改变当前 promise，如改变 promise 的状态，然后调用 `then` 注册的回调函数，所以回调函数是链接上下 Promise 的关键。`then` 方法会注册回调函数，并且返回 promise, 以进行链式调用，不过它的内部还对接受的参数进行了一些判断和处理。\n\n## Promise 优缺点\n\nPromise 相对于观察者模式和发布/订阅模式的优点是：\n\n1. Promise 一定程度上解决了深度嵌套的问题；\n2. Promise API 暴露相对简洁，也更为优雅；\n3. 支持序列执行，利于多异步协作；\n4. 更好的错误处理；\n\n主要缺点是：高级接口对 API 的封装使其失去了一定的灵活性。\n\n## 参考\n\n- [Promises/A+](https://promisesaplus.com/)\n- [TS 版 Promise ，promise-polyfill 实现过程详解](https://github.com/leer0911/myPromise)\n- [promised](https://github.com/yanguango/promised)\n- [图解 Promise 实现原理](https://zhuanlan.zhihu.com/p/58428287)\n","slug":"Promise实现原理","published":1,"updated":"2020-05-12T07:06:02.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka3knzqc0000j4tpg2ii5pt3","content":"<h1 id=\"Promise-实现原理\"><a href=\"#Promise-实现原理\" class=\"headerlink\" title=\"Promise 实现原理\"></a>Promise 实现原理</h1><h2 id=\"Promise-简史\"><a href=\"#Promise-简史\" class=\"headerlink\" title=\"Promise 简史\"></a>Promise 简史</h2><p>Promise 作为一种异步编程的解决方案，在 JavaScript 被广泛使用。Promise 并不是一个新的概念，Promise 的概念在 1976 年就已经被提出。<br>在 2011年初，Promise 随着 jQuery 1.5 的发布，而变得越来越流行。2012 年，Promise 被提出作为规范。Promise 在 ECMAScript 2015 中成为正式规范，并已被几乎所有的浏览器和 Node 兼容。</p>\n<h2 id=\"从设计模式来看-Promise\"><a href=\"#从设计模式来看-Promise\" class=\"headerlink\" title=\"从设计模式来看 Promise\"></a>从设计模式来看 Promise</h2><p>Promise 在一定程度上继承自观察者和发布/订阅模式。</p>\n<p>下面是一个极简的例子，我们可以从观察者模式和发布/订阅模式来理解 Promise.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</span><br><span class=\"line\">  _callbacks = []</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> callbacks = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"keyword\">this</span>._callbacks.forEach(<span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> callback(value))</span><br><span class=\"line\">    executor(callbacks) <span class=\"comment\">// 相当于 emit 或 notify</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  then(onFulfilled) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._callbacks.push(onFulfilled) <span class=\"comment\">// 相当于 subscribe 或 on</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    callback(<span class=\"string\">'promise1'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">promise1.then(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 秒后'</span>, value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">promise1.then(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 秒后'</span>, value)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>但是 Promise 是一种高度封装的接口，它的 API 不止如此简单，Promise 有其自身的 Promise。</p>\n<h2 id=\"Promise-规范\"><a href=\"#Promise-规范\" class=\"headerlink\" title=\"Promise 规范\"></a>Promise 规范</h2><p>Promise 的实现有不同的规范，如 <a href=\"http://wiki.commonjs.org/wiki/Promises/A\" target=\"_blank\" rel=\"noopener\">Promise/A</a>，<a href=\"https://promisesaplus.com/differences-from-promises-a\" target=\"_blank\" rel=\"noopener\">Promise/A+</a>，<a href=\"http://wiki.commonjs.org/wiki/Promises/B\" target=\"_blank\" rel=\"noopener\">Promise/B</a>，<a href=\"http://wiki.commonjs.org/wiki/Promises/KISS\" target=\"_blank\" rel=\"noopener\">Promise/KISS</a>，Promise/C，<a href=\"http://wiki.commonjs.org/wiki/Promises/D\" target=\"_blank\" rel=\"noopener\">Promise/D</a> 规范。<br>Promise/A 规范定义了什么是 Promise，其他规范在其基础上扩展了相关 API.ES6 的 Promise 是基于 Promise/A+ 规范的实现。而 Promise/A+ 是基于 Promise/A 规范的升级。相关规范也提供了<a href=\"https://github.com/promises-aplus/promises-tests\" target=\"_blank\" rel=\"noopener\">测试</a>，以检测实现是否兼容规范。由于ECMAScript 使用 Promise/A+ 规范，这里我们使用 JavaScript 来实现 Promise/A+ 规范。<a href=\"https://promisesaplus.com/implementations\" target=\"_blank\" rel=\"noopener\">这里</a>有很多 Promise/A+ 的实现。</p>\n<h2 id=\"实现-Promise-A-规范\"><a href=\"#实现-Promise-A-规范\" class=\"headerlink\" title=\"实现 Promise/A+ 规范\"></a>实现 Promise/A+ 规范</h2><p>下面是关于 Promise/A+ 规范的介绍。先了解规范以便于实现该规范。<br>Promise 表示异步操作的最终结果，与之交互的主要方式是通过 <code>then</code> 方法，该方法注册两个回调函数，用于接受 Promise 终值或 promise 抛出的异常。</p>\n<h3 id=\"相关术语\"><a href=\"#相关术语\" class=\"headerlink\" title=\"相关术语\"></a>相关术语</h3><ol>\n<li>Promise 表示拥有 <code>then</code> 方法的对象或者函数,其行为符合本规范；</li>\n<li>Thenable  表示拥有 <code>then</code> 方法的对象或函数；</li>\n<li>值（value）指合法的 JavaScript 值（包括 <code>undefined</code>, thenable 或 promise）；</li>\n<li>异常（exception） 指使用 <code>throw</code> 语句抛出的值；</li>\n<li>拒因（reason）指 promise 被拒绝的原因；</li>\n</ol>\n<h3 id=\"规范要求\"><a href=\"#规范要求\" class=\"headerlink\" title=\"规范要求\"></a>规范要求</h3><h4 id=\"Promise-的状态\"><a href=\"#Promise-的状态\" class=\"headerlink\" title=\"Promise 的状态\"></a>Promise 的状态</h4><p>Promise 有三种状态：等待态（Pending）, 执行态（Fulfilled） 或 拒绝态（Rejected）。</p>\n<ul>\n<li>等待态（Pending）<ul>\n<li>可以转换为 fulfilled 或 rejected</li>\n</ul>\n</li>\n<li>执行态（Fulfilled）<ul>\n<li>不能转换为其他状态</li>\n<li>拥一个<strong>不可变</strong>的终值</li>\n</ul>\n</li>\n<li>拒绝态（Rejected）。<ul>\n<li>不能转换为其他状态</li>\n<li>拥有一个不可变的拒因<br>这里的不可变指标识的不可变（immutable identity）（可用 <code>===</code> 判断相等），但不是深度不可变。<br>（引用地址相等，但可更改属性值）。这里我们举个例子</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> value = [<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.resolve(value)</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> <span class=\"built_in\">console</span>.log(val)) <span class=\"comment\">// [1]</span></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> <span class=\"built_in\">console</span>.log(val === value)) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123; val = [<span class=\"number\">2</span>]; <span class=\"built_in\">console</span>.log(val)&#125;) <span class=\"comment\">// [2]</span></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(val) &#125;) <span class=\"comment\">// [1]</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123; val[<span class=\"number\">0</span>] = <span class=\"number\">2</span>; <span class=\"built_in\">console</span>.log(val === value)&#125;) <span class=\"comment\">// [2] true</span></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> <span class=\"built_in\">console</span>.log(val)) <span class=\"comment\">// [2]</span></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> <span class=\"built_in\">console</span>.log(val === value)) <span class=\"comment\">//  true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Then-方法\"><a href=\"#Then-方法\" class=\"headerlink\" title=\"Then 方法\"></a>Then 方法</h4><p>Promise 一定有一个 <code>then</code> 方法，<code>then</code> 方法接受两个参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>onFulfilled</code> 和 <code>onRejected</code> 都为可选参数；<ul>\n<li>若 <code>onFulfilled</code> 不是函数，则被忽略；</li>\n<li>若 <code>onRejected</code> 不是函数，则被忽略；</li>\n</ul>\n</li>\n<li><code>onFulfilled</code><ul>\n<li>在 <code>promise</code> 执行（fulfilled）后调用，其第一个参数为 <code>promise</code> 的终值；</li>\n<li>在 <code>promise</code> 执行结束（fulfilled）前不可调用；</li>\n<li>其只调用一次；</li>\n</ul>\n</li>\n<li><code>onRejected</code>：<ul>\n<li>在 <code>promise</code> 决绝（rejected）后调用，其第一个参数为 <code>promise</code> 的据因；</li>\n<li>它必须在 promise rejected 状态之后调用；</li>\n<li>其只调用一次；</li>\n</ul>\n</li>\n<li><code>onFulfilled</code> 或 <code>onRejected</code> 只有在<a href=\"http://es5.github.io/#x10.3\" target=\"_blank\" rel=\"noopener\">执行环境</a>堆栈仅包含平台代码[^注1]后才可调用</li>\n<li><code>onFulfilled</code> 或 <code>onRejected</code> 是作为函数调用（即没有 this 值）[^注2]；</li>\n<li><p><code>then</code> 可以在同一个 promise 上调用多次</p>\n<ul>\n<li>当 <code>promise</code> 被执行后，所有的 <code>onFulfilled</code> 回调会按照注册的顺序依次执行；</li>\n<li>当 <code>promise</code> 被拒绝后，所有的 <code>onRejected</code> 回调会按照指定的顺序执行；</li>\n</ul>\n</li>\n<li><p><code>then</code> 方法一定返回 <code>promise</code> 对象。[^注3]</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise2 = promise1.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果 <code>onFulfilled</code> 或 <code>onRejected</code> 返回一个值 <code>x</code>, 则运行 Promise 解决过程 <code>[[Resolve]](promise2, x)</code>;</p>\n</li>\n<li>如果 <code>onFulfilled</code> 或 <code>onRejected</code> 抛出异常 <code>e</code>，<code>promise2</code> 必须拒绝执行, 并以 <code>e</code> 作为拒因;</li>\n<li>如果 <code>onFulfiled</code> 不是函数且 <code>promise1</code> 被执行，则 <code>promise2</code> 执行并返回和 <code>promise1</code> 相同的值。</li>\n<li>如果 <code>onRejected</code> 不是函数且 <code>promise1</code> 被拒绝，则 <code>promise2</code> 拒绝并返回和 <code>promise1</code> 相同的拒因。</li>\n</ul>\n<p>（<strong>不论 <code>promise1</code> reject 还是 resolve , <code>promise2</code> 都会被 resolve，只有在 <code>promise1</code> 抛出异常后，<code>promise2</code> 才会被拒绝（reject）,其余都会被执行完成</strong>）</p>\n<h3 id=\"Promise-解决过程\"><a href=\"#Promise-解决过程\" class=\"headerlink\" title=\"Promise 解决过程\"></a>Promise 解决过程</h3><p><strong>Promise 的解决过程</strong>是一个抽象的操作，其需输入一个 promise 和一个值 <code>x</code>，将其表示为 <code>[[resolve]](promise, x)</code>。</p>\n<p>如果 <code>x</code> 有 <code>then</code> 方法 ，且行为像 <code>promise</code>, 解决程序会试图使 <code>promise</code> 接受 <code>x</code> 的状态，否则其用 <code>x</code> 的值执行 <code>promise</code>。</p>\n<p>Thenable 的特性使得 <code>promise</code> 的实现更具通用性：只要其暴露出一个遵循 Promise/A+ 规范的 <code>then</code> 方法即可，同时也使 Promise/A+ 规范能与那些不太规范实现良好兼容。</p>\n<p>运行 <code>[[resolve]](promise, x)</code>，会执行以下步骤：</p>\n<ol>\n<li><p>如果 <code>promise</code> 和 <code>x</code> 指向同一个对象，抛出 <code>TypeError</code> 为拒因并拒绝 <code>promise</code>。</p>\n</li>\n<li><p><code>x</code> 为 Promise：如果 <code>x</code> 为 <code>promise</code>，则使 <code>promise</code> 接受 <code>x</code> 的状态。[^注4]</p>\n<ul>\n<li><code>x</code> 处于等待态（<code>pending</code>）， <code>promise</code> 需保持等待态（<code>pending</code>）直到 <code>x</code> 被解决或被拒绝；</li>\n<li><code>x</code> 处于执行态（<code>fulfilled</code>），用同样的值执行 <code>promise</code>；</li>\n<li><code>x</code> 处于拒绝态（<code>rejected</code>），用同样的据因拒绝 <code>promise</code>；</li>\n</ul>\n</li>\n<li><code>x</code> 为对象或函数：<ul>\n<li>把 <code>x.then</code> 赋值给 <code>then</code>；[^注5]</li>\n<li>如果取 <code>x.then</code> 值抛出错误 <code>e</code>，则将 <code>e</code> 作为据因拒绝 <code>promise</code>；</li>\n<li>如果 <code>then</code> 是函数，将 <code>x</code> 作为其 <code>this</code> 值（绑定至 <code>x</code>）来调用，第一个参数为 <code>resolvePromise</code> ，第二个参数是 <code>rejectPromise</code><ul>\n<li>如果 <code>resolvePromise</code>以参数 <code>y</code> 调用，运行 <code>[[resolve]](promise, y)</code></li>\n<li>如果 <code>rejectPromise</code>以据因 <code>r</code> 调用，则以 <code>r</code> 为原因拒绝 <code>promise</code></li>\n<li>如果 <code>resolvePromise</code> 和 <code>rejectPromise</code> 均被调用，或者被同样的参数调用多次，则第一个调用优先，其他的调用都将被忽略。</li>\n<li>如果调用 <code>then</code> 抛出异常 <code>e</code><ul>\n<li>如果 <code>resolvePromise</code> 和 <code>rejectPromise</code> 已调用过，则忽略</li>\n<li>否则以 <code>e</code> 为原因拒绝 <code>Promise</code></li>\n</ul>\n</li>\n<li>如果 <code>then</code> 不是函数，则 <code>x</code> 为值执行 <code>promise</code></li>\n<li>如果 <code>x</code> 不是一个对象或函数，则以 <code>x</code> 为值执行 <code>promise</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>（这里 <code>then</code> 是函数，为 <code>promise</code> 核心。）</p>\n<p>如果一个 <code>promise</code> 被一个循环的 thenable 链中的对象解决, 而 <code>[[resolve]](promise, thenable)</code> 的递归性质使得其被再次调用，将导致无线递归。鼓励（但不是必需的）检测这种递归，并以 <code>TypeError</code> 为据因拒绝 <code>promise</code>。[^注6]</p>\n<h3 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h3><p>[^注1]: 这里的平台代码是指引擎、环境以及 promise 的实现代码。实际上，此要求可确保在事件循环回合之后调用 <code>onFulfilled</code> 或 <code>onRejected</code> 并随后以新的栈异步执行。可使用<strong>宏任务(macro-task)</strong>机制（如 <code>setTimeout</code> 或 <code>setImmetiate</code> 或<strong>微任务(micro-task)</strong>机制（如 <code>MutationObserver</code> 或 <code>process.nextTick</code>）来实现。由于 promise 实现代码就是平台代码，因此它本身可能包含一个任务调度队列或 trampoline 在其中调用处理程序。</p>\n<blockquote>\n<p>（这里提到了事件循环（EventLoop）、宏任务（macro-task）和微任务（micro-task）等概念，事件循环是一个执行模型。在执行 JavaScript 代码时，将整个脚本作为一个宏任务（macro-task）执行，执行过程中，同步代码会直接执行，而其他代码引擎会将任务按照类别分到这两个队列中，分别是宏任务（macro-task）和微任务（micro-task）队列，首先在 macrotask 的队列（这个队列也被叫做 task queue）中取出第一个任务，执行完毕后取出 microtask 队列中的所有任务顺序执行；之后再取 macrotask 任务，周而复始，直到两个队列执行完毕。）</p>\n</blockquote>\n<ul>\n<li><blockquote>\n<p>宏任务（macro-task）：<code>script</code> 、<code>setTimeout</code>、<code>setInterval</code> 、<code>setImmediate</code> 、I/O 、UI rendering</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>微任务（micro-task）：<code>process.nextTick</code>, <code>Promises</code>（浏览器原生，和基于此的技术，如 <code>fetch</code> 等）, <code>Object.observe</code>, <code>MutationObserver</code></p>\n</blockquote>\n</li>\n</ul>\n<p>[^注2]: 在严格模式下，<code>this</code> 会是 <code>undefined</code>。在宽松模式下其为 <code>global</code> 对象。</p>\n<p>[^注3]: 如果符合所有其他规范要求，可以允许 <code>promise2 === promise1</code>。每种实现都应说明 <code>promise2 === promise1</code> 是否可以成立，以及在什么条件下成立。</p>\n<p>[^注4]: 通常，只有它来自当前的实现，才能判断 <code>x</code> 是否是一个真正的 promise。此条款允许采取已知符合 promise 标准实现的状态。</p>\n<p>[^注5]：我们首先储存了指向 <code>x.then</code> 的引用，然后测试并调用该引用，以避免在过程中对 <code>x.then</code> 属性的多次访问。这是为了避免访问器属性在不同访问过程中发生改变，保证访问器属性的一致性。</p>\n<p>[^注6]: 实现不应对 thenable 链的深度设限，并假设超出深度限制就是无限递归。只有真正的循环递归才应抛出 <code>TypeError</code> 异常。如果链上有多个不同的 thenable，则递归下去才是正确的行为。</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>Promise 的原理是使用回调函数在异步操作后执行，只不过时将回调封装在内部，通过 <code>then</code> 方法实现链式使得多层回调看似变一层，而同一个 <code>promise</code> 的 <code>then</code> 方法可以调用多次。所以可以将回调函数（<code>onFulfilled</code> 和 <code>onRejected</code>）保存到数组中，在完成后执行。</p>\n<p>代码实现：<a href=\"https://github.com/L9m/promise.git\" target=\"_blank\" rel=\"noopener\">code</a></p>\n<p>这样我基本实现了 Promise/A+ 规范，相比 ES6 中的 Promise, 还缺少一些 API，这些 API 相对简单。对于 Promise, executor 会立即执行， executor 会接受两个参数——回调函数，回调函数绑定 <code>this</code> 至当前 promise，当 executor 执行完毕或拒绝后，会执行回调函数，改变当前 promise，如改变 promise 的状态，然后调用 <code>then</code> 注册的回调函数，所以回调函数是链接上下 Promise 的关键。<code>then</code> 方法会注册回调函数，并且返回 promise, 以进行链式调用，不过它的内部还对接受的参数进行了一些判断和处理。</p>\n<h2 id=\"Promise-优缺点\"><a href=\"#Promise-优缺点\" class=\"headerlink\" title=\"Promise 优缺点\"></a>Promise 优缺点</h2><p>Promise 相对于观察者模式和发布/订阅模式的优点是：</p>\n<ol>\n<li>Promise 一定程度上解决了深度嵌套的问题；</li>\n<li>Promise API 暴露相对简洁，也更为优雅；</li>\n<li>支持序列执行，利于多异步协作；</li>\n<li>更好的错误处理；</li>\n</ol>\n<p>主要缺点是：高级接口对 API 的封装使其失去了一定的灵活性。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://promisesaplus.com/\" target=\"_blank\" rel=\"noopener\">Promises/A+</a></li>\n<li><a href=\"https://github.com/leer0911/myPromise\" target=\"_blank\" rel=\"noopener\">TS 版 Promise ，promise-polyfill 实现过程详解</a></li>\n<li><a href=\"https://github.com/yanguango/promised\" target=\"_blank\" rel=\"noopener\">promised</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/58428287\" target=\"_blank\" rel=\"noopener\">图解 Promise 实现原理</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Promise-实现原理\"><a href=\"#Promise-实现原理\" class=\"headerlink\" title=\"Promise 实现原理\"></a>Promise 实现原理</h1><h2 id=\"Promise-简史\"><a href=\"#Promise-简史\" class=\"headerlink\" title=\"Promise 简史\"></a>Promise 简史</h2><p>Promise 作为一种异步编程的解决方案，在 JavaScript 被广泛使用。Promise 并不是一个新的概念，Promise 的概念在 1976 年就已经被提出。<br>在 2011年初，Promise 随着 jQuery 1.5 的发布，而变得越来越流行。2012 年，Promise 被提出作为规范。Promise 在 ECMAScript 2015 中成为正式规范，并已被几乎所有的浏览器和 Node 兼容。</p>\n<h2 id=\"从设计模式来看-Promise\"><a href=\"#从设计模式来看-Promise\" class=\"headerlink\" title=\"从设计模式来看 Promise\"></a>从设计模式来看 Promise</h2><p>Promise 在一定程度上继承自观察者和发布/订阅模式。</p>\n<p>下面是一个极简的例子，我们可以从观察者模式和发布/订阅模式来理解 Promise.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</span><br><span class=\"line\">  _callbacks = []</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> callbacks = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"keyword\">this</span>._callbacks.forEach(<span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> callback(value))</span><br><span class=\"line\">    executor(callbacks) <span class=\"comment\">// 相当于 emit 或 notify</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  then(onFulfilled) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._callbacks.push(onFulfilled) <span class=\"comment\">// 相当于 subscribe 或 on</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    callback(<span class=\"string\">'promise1'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">promise1.then(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 秒后'</span>, value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">promise1.then(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 秒后'</span>, value)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>但是 Promise 是一种高度封装的接口，它的 API 不止如此简单，Promise 有其自身的 Promise。</p>\n<h2 id=\"Promise-规范\"><a href=\"#Promise-规范\" class=\"headerlink\" title=\"Promise 规范\"></a>Promise 规范</h2><p>Promise 的实现有不同的规范，如 <a href=\"http://wiki.commonjs.org/wiki/Promises/A\" target=\"_blank\" rel=\"noopener\">Promise/A</a>，<a href=\"https://promisesaplus.com/differences-from-promises-a\" target=\"_blank\" rel=\"noopener\">Promise/A+</a>，<a href=\"http://wiki.commonjs.org/wiki/Promises/B\" target=\"_blank\" rel=\"noopener\">Promise/B</a>，<a href=\"http://wiki.commonjs.org/wiki/Promises/KISS\" target=\"_blank\" rel=\"noopener\">Promise/KISS</a>，Promise/C，<a href=\"http://wiki.commonjs.org/wiki/Promises/D\" target=\"_blank\" rel=\"noopener\">Promise/D</a> 规范。<br>Promise/A 规范定义了什么是 Promise，其他规范在其基础上扩展了相关 API.ES6 的 Promise 是基于 Promise/A+ 规范的实现。而 Promise/A+ 是基于 Promise/A 规范的升级。相关规范也提供了<a href=\"https://github.com/promises-aplus/promises-tests\" target=\"_blank\" rel=\"noopener\">测试</a>，以检测实现是否兼容规范。由于ECMAScript 使用 Promise/A+ 规范，这里我们使用 JavaScript 来实现 Promise/A+ 规范。<a href=\"https://promisesaplus.com/implementations\" target=\"_blank\" rel=\"noopener\">这里</a>有很多 Promise/A+ 的实现。</p>\n<h2 id=\"实现-Promise-A-规范\"><a href=\"#实现-Promise-A-规范\" class=\"headerlink\" title=\"实现 Promise/A+ 规范\"></a>实现 Promise/A+ 规范</h2><p>下面是关于 Promise/A+ 规范的介绍。先了解规范以便于实现该规范。<br>Promise 表示异步操作的最终结果，与之交互的主要方式是通过 <code>then</code> 方法，该方法注册两个回调函数，用于接受 Promise 终值或 promise 抛出的异常。</p>\n<h3 id=\"相关术语\"><a href=\"#相关术语\" class=\"headerlink\" title=\"相关术语\"></a>相关术语</h3><ol>\n<li>Promise 表示拥有 <code>then</code> 方法的对象或者函数,其行为符合本规范；</li>\n<li>Thenable  表示拥有 <code>then</code> 方法的对象或函数；</li>\n<li>值（value）指合法的 JavaScript 值（包括 <code>undefined</code>, thenable 或 promise）；</li>\n<li>异常（exception） 指使用 <code>throw</code> 语句抛出的值；</li>\n<li>拒因（reason）指 promise 被拒绝的原因；</li>\n</ol>\n<h3 id=\"规范要求\"><a href=\"#规范要求\" class=\"headerlink\" title=\"规范要求\"></a>规范要求</h3><h4 id=\"Promise-的状态\"><a href=\"#Promise-的状态\" class=\"headerlink\" title=\"Promise 的状态\"></a>Promise 的状态</h4><p>Promise 有三种状态：等待态（Pending）, 执行态（Fulfilled） 或 拒绝态（Rejected）。</p>\n<ul>\n<li>等待态（Pending）<ul>\n<li>可以转换为 fulfilled 或 rejected</li>\n</ul>\n</li>\n<li>执行态（Fulfilled）<ul>\n<li>不能转换为其他状态</li>\n<li>拥一个<strong>不可变</strong>的终值</li>\n</ul>\n</li>\n<li>拒绝态（Rejected）。<ul>\n<li>不能转换为其他状态</li>\n<li>拥有一个不可变的拒因<br>这里的不可变指标识的不可变（immutable identity）（可用 <code>===</code> 判断相等），但不是深度不可变。<br>（引用地址相等，但可更改属性值）。这里我们举个例子</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> value = [<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.resolve(value)</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> <span class=\"built_in\">console</span>.log(val)) <span class=\"comment\">// [1]</span></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> <span class=\"built_in\">console</span>.log(val === value)) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123; val = [<span class=\"number\">2</span>]; <span class=\"built_in\">console</span>.log(val)&#125;) <span class=\"comment\">// [2]</span></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(val) &#125;) <span class=\"comment\">// [1]</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123; val[<span class=\"number\">0</span>] = <span class=\"number\">2</span>; <span class=\"built_in\">console</span>.log(val === value)&#125;) <span class=\"comment\">// [2] true</span></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> <span class=\"built_in\">console</span>.log(val)) <span class=\"comment\">// [2]</span></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> <span class=\"built_in\">console</span>.log(val === value)) <span class=\"comment\">//  true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Then-方法\"><a href=\"#Then-方法\" class=\"headerlink\" title=\"Then 方法\"></a>Then 方法</h4><p>Promise 一定有一个 <code>then</code> 方法，<code>then</code> 方法接受两个参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>onFulfilled</code> 和 <code>onRejected</code> 都为可选参数；<ul>\n<li>若 <code>onFulfilled</code> 不是函数，则被忽略；</li>\n<li>若 <code>onRejected</code> 不是函数，则被忽略；</li>\n</ul>\n</li>\n<li><code>onFulfilled</code><ul>\n<li>在 <code>promise</code> 执行（fulfilled）后调用，其第一个参数为 <code>promise</code> 的终值；</li>\n<li>在 <code>promise</code> 执行结束（fulfilled）前不可调用；</li>\n<li>其只调用一次；</li>\n</ul>\n</li>\n<li><code>onRejected</code>：<ul>\n<li>在 <code>promise</code> 决绝（rejected）后调用，其第一个参数为 <code>promise</code> 的据因；</li>\n<li>它必须在 promise rejected 状态之后调用；</li>\n<li>其只调用一次；</li>\n</ul>\n</li>\n<li><code>onFulfilled</code> 或 <code>onRejected</code> 只有在<a href=\"http://es5.github.io/#x10.3\" target=\"_blank\" rel=\"noopener\">执行环境</a>堆栈仅包含平台代码[^注1]后才可调用</li>\n<li><code>onFulfilled</code> 或 <code>onRejected</code> 是作为函数调用（即没有 this 值）[^注2]；</li>\n<li><p><code>then</code> 可以在同一个 promise 上调用多次</p>\n<ul>\n<li>当 <code>promise</code> 被执行后，所有的 <code>onFulfilled</code> 回调会按照注册的顺序依次执行；</li>\n<li>当 <code>promise</code> 被拒绝后，所有的 <code>onRejected</code> 回调会按照指定的顺序执行；</li>\n</ul>\n</li>\n<li><p><code>then</code> 方法一定返回 <code>promise</code> 对象。[^注3]</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise2 = promise1.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果 <code>onFulfilled</code> 或 <code>onRejected</code> 返回一个值 <code>x</code>, 则运行 Promise 解决过程 <code>[[Resolve]](promise2, x)</code>;</p>\n</li>\n<li>如果 <code>onFulfilled</code> 或 <code>onRejected</code> 抛出异常 <code>e</code>，<code>promise2</code> 必须拒绝执行, 并以 <code>e</code> 作为拒因;</li>\n<li>如果 <code>onFulfiled</code> 不是函数且 <code>promise1</code> 被执行，则 <code>promise2</code> 执行并返回和 <code>promise1</code> 相同的值。</li>\n<li>如果 <code>onRejected</code> 不是函数且 <code>promise1</code> 被拒绝，则 <code>promise2</code> 拒绝并返回和 <code>promise1</code> 相同的拒因。</li>\n</ul>\n<p>（<strong>不论 <code>promise1</code> reject 还是 resolve , <code>promise2</code> 都会被 resolve，只有在 <code>promise1</code> 抛出异常后，<code>promise2</code> 才会被拒绝（reject）,其余都会被执行完成</strong>）</p>\n<h3 id=\"Promise-解决过程\"><a href=\"#Promise-解决过程\" class=\"headerlink\" title=\"Promise 解决过程\"></a>Promise 解决过程</h3><p><strong>Promise 的解决过程</strong>是一个抽象的操作，其需输入一个 promise 和一个值 <code>x</code>，将其表示为 <code>[[resolve]](promise, x)</code>。</p>\n<p>如果 <code>x</code> 有 <code>then</code> 方法 ，且行为像 <code>promise</code>, 解决程序会试图使 <code>promise</code> 接受 <code>x</code> 的状态，否则其用 <code>x</code> 的值执行 <code>promise</code>。</p>\n<p>Thenable 的特性使得 <code>promise</code> 的实现更具通用性：只要其暴露出一个遵循 Promise/A+ 规范的 <code>then</code> 方法即可，同时也使 Promise/A+ 规范能与那些不太规范实现良好兼容。</p>\n<p>运行 <code>[[resolve]](promise, x)</code>，会执行以下步骤：</p>\n<ol>\n<li><p>如果 <code>promise</code> 和 <code>x</code> 指向同一个对象，抛出 <code>TypeError</code> 为拒因并拒绝 <code>promise</code>。</p>\n</li>\n<li><p><code>x</code> 为 Promise：如果 <code>x</code> 为 <code>promise</code>，则使 <code>promise</code> 接受 <code>x</code> 的状态。[^注4]</p>\n<ul>\n<li><code>x</code> 处于等待态（<code>pending</code>）， <code>promise</code> 需保持等待态（<code>pending</code>）直到 <code>x</code> 被解决或被拒绝；</li>\n<li><code>x</code> 处于执行态（<code>fulfilled</code>），用同样的值执行 <code>promise</code>；</li>\n<li><code>x</code> 处于拒绝态（<code>rejected</code>），用同样的据因拒绝 <code>promise</code>；</li>\n</ul>\n</li>\n<li><code>x</code> 为对象或函数：<ul>\n<li>把 <code>x.then</code> 赋值给 <code>then</code>；[^注5]</li>\n<li>如果取 <code>x.then</code> 值抛出错误 <code>e</code>，则将 <code>e</code> 作为据因拒绝 <code>promise</code>；</li>\n<li>如果 <code>then</code> 是函数，将 <code>x</code> 作为其 <code>this</code> 值（绑定至 <code>x</code>）来调用，第一个参数为 <code>resolvePromise</code> ，第二个参数是 <code>rejectPromise</code><ul>\n<li>如果 <code>resolvePromise</code>以参数 <code>y</code> 调用，运行 <code>[[resolve]](promise, y)</code></li>\n<li>如果 <code>rejectPromise</code>以据因 <code>r</code> 调用，则以 <code>r</code> 为原因拒绝 <code>promise</code></li>\n<li>如果 <code>resolvePromise</code> 和 <code>rejectPromise</code> 均被调用，或者被同样的参数调用多次，则第一个调用优先，其他的调用都将被忽略。</li>\n<li>如果调用 <code>then</code> 抛出异常 <code>e</code><ul>\n<li>如果 <code>resolvePromise</code> 和 <code>rejectPromise</code> 已调用过，则忽略</li>\n<li>否则以 <code>e</code> 为原因拒绝 <code>Promise</code></li>\n</ul>\n</li>\n<li>如果 <code>then</code> 不是函数，则 <code>x</code> 为值执行 <code>promise</code></li>\n<li>如果 <code>x</code> 不是一个对象或函数，则以 <code>x</code> 为值执行 <code>promise</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>（这里 <code>then</code> 是函数，为 <code>promise</code> 核心。）</p>\n<p>如果一个 <code>promise</code> 被一个循环的 thenable 链中的对象解决, 而 <code>[[resolve]](promise, thenable)</code> 的递归性质使得其被再次调用，将导致无线递归。鼓励（但不是必需的）检测这种递归，并以 <code>TypeError</code> 为据因拒绝 <code>promise</code>。[^注6]</p>\n<h3 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h3><p>[^注1]: 这里的平台代码是指引擎、环境以及 promise 的实现代码。实际上，此要求可确保在事件循环回合之后调用 <code>onFulfilled</code> 或 <code>onRejected</code> 并随后以新的栈异步执行。可使用<strong>宏任务(macro-task)</strong>机制（如 <code>setTimeout</code> 或 <code>setImmetiate</code> 或<strong>微任务(micro-task)</strong>机制（如 <code>MutationObserver</code> 或 <code>process.nextTick</code>）来实现。由于 promise 实现代码就是平台代码，因此它本身可能包含一个任务调度队列或 trampoline 在其中调用处理程序。</p>\n<blockquote>\n<p>（这里提到了事件循环（EventLoop）、宏任务（macro-task）和微任务（micro-task）等概念，事件循环是一个执行模型。在执行 JavaScript 代码时，将整个脚本作为一个宏任务（macro-task）执行，执行过程中，同步代码会直接执行，而其他代码引擎会将任务按照类别分到这两个队列中，分别是宏任务（macro-task）和微任务（micro-task）队列，首先在 macrotask 的队列（这个队列也被叫做 task queue）中取出第一个任务，执行完毕后取出 microtask 队列中的所有任务顺序执行；之后再取 macrotask 任务，周而复始，直到两个队列执行完毕。）</p>\n</blockquote>\n<ul>\n<li><blockquote>\n<p>宏任务（macro-task）：<code>script</code> 、<code>setTimeout</code>、<code>setInterval</code> 、<code>setImmediate</code> 、I/O 、UI rendering</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>微任务（micro-task）：<code>process.nextTick</code>, <code>Promises</code>（浏览器原生，和基于此的技术，如 <code>fetch</code> 等）, <code>Object.observe</code>, <code>MutationObserver</code></p>\n</blockquote>\n</li>\n</ul>\n<p>[^注2]: 在严格模式下，<code>this</code> 会是 <code>undefined</code>。在宽松模式下其为 <code>global</code> 对象。</p>\n<p>[^注3]: 如果符合所有其他规范要求，可以允许 <code>promise2 === promise1</code>。每种实现都应说明 <code>promise2 === promise1</code> 是否可以成立，以及在什么条件下成立。</p>\n<p>[^注4]: 通常，只有它来自当前的实现，才能判断 <code>x</code> 是否是一个真正的 promise。此条款允许采取已知符合 promise 标准实现的状态。</p>\n<p>[^注5]：我们首先储存了指向 <code>x.then</code> 的引用，然后测试并调用该引用，以避免在过程中对 <code>x.then</code> 属性的多次访问。这是为了避免访问器属性在不同访问过程中发生改变，保证访问器属性的一致性。</p>\n<p>[^注6]: 实现不应对 thenable 链的深度设限，并假设超出深度限制就是无限递归。只有真正的循环递归才应抛出 <code>TypeError</code> 异常。如果链上有多个不同的 thenable，则递归下去才是正确的行为。</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>Promise 的原理是使用回调函数在异步操作后执行，只不过时将回调封装在内部，通过 <code>then</code> 方法实现链式使得多层回调看似变一层，而同一个 <code>promise</code> 的 <code>then</code> 方法可以调用多次。所以可以将回调函数（<code>onFulfilled</code> 和 <code>onRejected</code>）保存到数组中，在完成后执行。</p>\n<p>代码实现：<a href=\"https://github.com/L9m/promise.git\" target=\"_blank\" rel=\"noopener\">code</a></p>\n<p>这样我基本实现了 Promise/A+ 规范，相比 ES6 中的 Promise, 还缺少一些 API，这些 API 相对简单。对于 Promise, executor 会立即执行， executor 会接受两个参数——回调函数，回调函数绑定 <code>this</code> 至当前 promise，当 executor 执行完毕或拒绝后，会执行回调函数，改变当前 promise，如改变 promise 的状态，然后调用 <code>then</code> 注册的回调函数，所以回调函数是链接上下 Promise 的关键。<code>then</code> 方法会注册回调函数，并且返回 promise, 以进行链式调用，不过它的内部还对接受的参数进行了一些判断和处理。</p>\n<h2 id=\"Promise-优缺点\"><a href=\"#Promise-优缺点\" class=\"headerlink\" title=\"Promise 优缺点\"></a>Promise 优缺点</h2><p>Promise 相对于观察者模式和发布/订阅模式的优点是：</p>\n<ol>\n<li>Promise 一定程度上解决了深度嵌套的问题；</li>\n<li>Promise API 暴露相对简洁，也更为优雅；</li>\n<li>支持序列执行，利于多异步协作；</li>\n<li>更好的错误处理；</li>\n</ol>\n<p>主要缺点是：高级接口对 API 的封装使其失去了一定的灵活性。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://promisesaplus.com/\" target=\"_blank\" rel=\"noopener\">Promises/A+</a></li>\n<li><a href=\"https://github.com/leer0911/myPromise\" target=\"_blank\" rel=\"noopener\">TS 版 Promise ，promise-polyfill 实现过程详解</a></li>\n<li><a href=\"https://github.com/yanguango/promised\" target=\"_blank\" rel=\"noopener\">promised</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/58428287\" target=\"_blank\" rel=\"noopener\">图解 Promise 实现原理</a></li>\n</ul>\n"},{"title":"test","date":"2019-03-20T03:11:38.000Z","_content":"\n## test","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2019-03-20 11:11:38\ntags:\n---\n\n## test","slug":"test","published":1,"updated":"2020-05-03T03:21:25.674Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka3knzqh0001j4tp21uu0x5y","content":"<h2 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h2>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}